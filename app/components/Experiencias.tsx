'use client';

import styles from './Experiencias.module.css';
import { useState, useEffect, useRef } from 'react';

const experiencias = [


  {
    id: 'freelancer',
    titulo: 'Freelancer ‚Äì Aut√¥nomo',
    descricao:[
      'Desenvolvimento Back-End and Front-End.',
      'Manuten√ß√£o de TI para pequenas empresas.',
      'Desenvolvimento de software utilizando Python, SQL, Power BI e IA.',
      'Suporte sobre desenvolvimento de software.'
    ],
    periodo: '08/2024 ‚Äì Atualmente',
  },

  {
    id: 'connect5g',
    titulo: 'Connect 5G ‚Äì Est√°gio e Programador ',
    descricao: [
      'Integrante da equipe de DevOps remotamente.',
      'Representa√ß√£o da empresa em reuni√µes com clientes.',
      'Desenvolvimento de solu√ß√µes em Python e JavaScript para automa√ß√£o e manipula√ß√£o de dados.',
      'Utiliza√ß√£o de SQL, DAX e Power BI para an√°lise de dados e relat√≥rios.',
      'Apliic√ß√£o de conceitos de Django Rest Framework e React.',
      'Cria√ß√£o de scripts para valida√ß√£o em plataformas internas.',
      'Experi√™ncia pr√°tica com produtos AWS (EC2, S3, RDS).',
      'Ado√ß√£o de metodologias √°geis e uso avan√ßado do Git.'
  ],
    periodo: '08/2023 ‚Äì 07/2024',
  },

  {
    id: 'solucx',
    titulo: 'SoluCX ‚Äì Est√°gio em Machine Learning',
    descricao: [
      'Processamento e classifica√ß√£o de banco de dados com Excel e MySQL',
      'Automa√ß√£o de tarefas em Python para manipula√ß√£o de dados e gera√ß√£o de relat√≥rios.',
      'Desenvolvimento de dashboards em Power BI.',
      'Apresenta√ß√£o de workshops e cria√ß√£o de tutoriais em v√≠deos.',
      'Conceitos de Machine Learning aplicados em algoritmos propriet√°rios.',
      'Uso de metodologias √°geis para gerenciamento de tarefas.',
    ],
    periodo: '03/2022 ‚Äì 09/2022',
  },
  
];

export default function Experiencias() {
  const [ativa, setAtiva] = useState<string | null>(null);
  const [visible, setVisible] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => setVisible(entry.isIntersecting),
      { threshold: 0.3 }
    );
    if (ref.current) observer.observe(ref.current);
    return () => observer.disconnect();
  }, []);

  const handleClick = (id: string) => {
    setAtiva((prev) => (prev === id ? null : id));
  };

  return (
    <section
      id="experiencias"
      className={`${styles.experiencias} ${visible ? styles.visible : ''}`}
      ref={ref}
    >
      <h2 className={styles.titulo}>üöÄ Experi√™ncias Profissionais</h2>

      <div className={styles.blocos}>
        {experiencias.map((exp) => (
          <div key={exp.id} className={styles.blocoWrapper}>
            <button
              onClick={() => handleClick(exp.id)}
              className={`${styles.bloco} ${ativa === exp.id ? styles.ativo : ''}`}
            >
              {exp.titulo.split('‚Äì')[0].trim()}
            </button>
            {ativa === exp.id && (
              <div className={`${styles.detalhes} ${styles.ativoDetalhe}`}>
                <h3>{exp.titulo}</h3>
                <ul className={styles.lista}>
                  {Array.isArray(exp.descricao) ? (
                    exp.descricao.map((item, i) => <li key={i}>{item}</li>)
                  ) : (
                    <li>{exp.descricao}</li>
                  )}
                </ul>
                <span>{exp.periodo}</span>
              </div>
            )}
          </div>
        ))}
      </div>
    </section>
  );
}
